{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creating a feature\n",
    "\n",
    "Features are derived from multiple analytes within a single trial. For example, product yield is a function of the substrate consumed, and product produced. Features are registered to the `SingleTrial` class and are composed of two components: the feature, and the feature manager.\n",
    "\n",
    "The feature manager ensures that the feature is created as soon as all the required analytes are available. Here we build the OD normalization feature as an example\n",
    "\n",
    "First we import the base features:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Naveen\\Anaconda3\\lib\\site-packages\\IPython\\html.py:14: ShimWarning: The `IPython.html` package has been deprecated since IPython 4.0. You should import from `notebook` instead. `IPython.html.widgets` has moved to `ipywidgets`.\n",
      "  \"`IPython.html.widgets` has moved to `ipywidgets`.\", ShimWarning)\n"
     ]
    }
   ],
   "source": [
    "from impact.core.features import BaseAnalyteFeature, BaseAnalyteFeatureFactory"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we can build our features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ODNormalizedData(BaseAnalyteFeature):\n",
    "    # The constructor should accept all required analytes as parameters \n",
    "    def __init__(self, biomass, reporter):\n",
    "        self.biomass = biomass\n",
    "        self.reporter = reporter\n",
    "        self.normalized_data = None\n",
    "    \n",
    "    # This data property assures that the data is returned, or calculated as needed\n",
    "    @property\n",
    "    def data(self):\n",
    "        if self.normalized_data is None: self.calculate()\n",
    "        return self.normalized_data\n",
    "    \n",
    "    # This is where the property is actually calculated and set\n",
    "    def calculate(self):\n",
    "        self.normalized_data = self.reporter.data_vector/self.biomass.data_vector\n",
    "        \n",
    "# The feature factory watches for those analytes\n",
    "class ODNormalizedDataFactory(BaseAnalyteFeatureFactory):\n",
    "    # define what the feature\n",
    "    requires = ['biomass','reporter']\n",
    "    name = 'od_normalized_data'\n",
    "    \n",
    "    # constructor should initialize variables until all required analytes are present,\n",
    "    # this will ensure that despite the order analytes are added, feature will be calculated appropriately\n",
    "    def __init__(self):\n",
    "        self.biomass = None\n",
    "        self.reporter = None\n",
    "    \n",
    "    # define how to handle new analytes\n",
    "    def add_analyte_data(self, analyte_data):\n",
    "        if analyte_data.trial_identifier.analyte_type == 'reporter':\n",
    "            self.reporter = analyte_data\n",
    "        elif analyte_data.trial_identifier.analyte_type == 'biomass':\n",
    "            self.biomass = analyte_data   \n",
    "            \n",
    "        if self.reporter is not None and self.biomass is not None:\n",
    "            setattr(analyte_data,self.name,ODNormalizedData(biomass,reporter))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we register the feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import impact.core.SingleTrial as SingleTrial\n",
    "SingleTrial.register_feature(ODNormalizedDataFactory)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and test it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from impact.core.AnalyteData import Biomass, Reporter\n",
    "from impact.core.TrialIdentifier import ReplicateTrialIdentifier as TI\n",
    "\n",
    "t = [0,1,2,3,4]\n",
    "biomass_data = [0.1,0.2,0.4,0.8,0.8]\n",
    "reporter_data = [1000,2000,3000,4000,5000]\n",
    "\n",
    "biomass = Biomass()\n",
    "biomass.time_vector = t\n",
    "biomass.data_vector = biomass_data\n",
    "ti = TI()\n",
    "ti.analyte_name = 'OD'\n",
    "ti.analyte_type = 'biomass'\n",
    "biomass.trial_identifier = ti\n",
    "\n",
    "reporter = Reporter()\n",
    "reporter.time_vector = t\n",
    "reporter.data_vector = reporter_data\n",
    "ti = TI()\n",
    "ti.analyte_name = 'gfp'\n",
    "ti.analyte_type = 'reporter'\n",
    "reporter.trial_identifier = ti\n",
    "\n",
    "trial = SingleTrial()\n",
    "trial.add_analyte_data(biomass)\n",
    "trial.add_analyte_data(reporter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 10000.  10000.   7500.   5000.   6250.]\n",
      "[ 10000.  10000.   7500.   5000.   6250.]\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "calculated_data = trial.analyte_dict['gfp'].od_normalized_data.data\n",
    "expected_data = np.array(reporter_data)/biomass_data\n",
    "\n",
    "print(calculated_data)\n",
    "print(expected_data)\n",
    "print(all(calculated_data==expected_data))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3.0
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}