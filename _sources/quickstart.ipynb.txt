{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quickstart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Naveen\\Anaconda3\\lib\\site-packages\\IPython\\html.py:14: ShimWarning: The `IPython.html` package has been deprecated. You should import from `notebook` instead. `IPython.html.widgets` has moved to `ipywidgets`.\n",
      "  \"`IPython.html.widgets` has moved to `ipywidgets`.\", ShimWarning)\n"
     ]
    }
   ],
   "source": [
    "import impact as impt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The impact framework is designed to help scientists parse, interpret, explore and visualize data to understand and engineer micorbial physiology. The core framework is open-source and written entirely in python.\n",
    "\n",
    "Data is parsed into an object-oriented data structure, built on top of a relational mapping to most sql databases. This allows for efficient saving and querying to ease data exploration.\n",
    "\n",
    "Here we provide the basics to get started analyzing data with the core framework. Before getting started, it is worthwhile to understand the basic data schema:\n",
    "\n",
    "| Model                | Function                                                                         |\n",
    "|----------------------|----------------------------------------------------------------------------------|\n",
    "| TrialIdentifier      | Describes a trial (time, analyte, strain, media, etc.)                           |\n",
    "| AnalyteData          | Time, data points and vectors for quantified data (g/L product, OD, etc.)        |\n",
    "| SingleTrial          | All analytes for a given unit (e.g. a tube, well on plate, bioreactor, etc.)     |\n",
    "| ReplicateTrial       | Contains a set of `SingleTrial`s with replicates grouped to calculate statistics |\n",
    "| Experiment           | All of the trials performed on a given date                                      |\n",
    "| Project              | Groups of experiments with overall goals              \n",
    "\n",
    "On import, data will automatically be parsed into this format. In addition, data will most commonly be queried by metadata in the `TrialIdentifier` which is composed of three main identifiers:\n",
    "\n",
    "| Model                | Function                                                                             |\n",
    "|----------------------|--------------------------------------------------------------------------------------|\n",
    "| Strain               | Describes the organism being characterized (e.g. strain, knockouts, plasmids, etc.)  |\n",
    "| Media                | Described the medium used to characterize the organism (e.g. M9 + 0.02% glc_D)       |\n",
    "| Environment          | The conditions and labware used (e.g. 96-well plate, 250RPM, 37C)                    |\n",
    "\n",
    "\n",
    "## Importing data\n",
    "\n",
    "Data is imported using the `parse_raw_data` function from the `.parsing` module. This function returns an `Experiment`, which is the result of organizing all of your data.\n",
    "\n",
    "To parse data, the data is usually provided in an xlsx file in one of the desired formats. If your data doesn't conform to one of the built-in formats, you can use the provided parsers as a cookbook to build your own. Generally, minor edits are required to conform to new data.\n",
    "\n",
    "Here we use the sample test data, which is a typical format for data from HPLC. Each row is a specific trial and time points, and the columns represent the different analytes, and their types. You can see this data in `tests/test_data/sample_input_data.xlsx`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Importing data from ../tests/test_data/sample_input_data.xlsx...0.1s\n",
      "Parsed 2884 timeCourseObjects in 0.528s...Number of lines skipped:  0\n",
      "Parsing time point list...Parsed 2884 time points in 2.7s\n",
      "Parsing analyte list...Parsed 18 analytes in 633.9ms\n",
      "Parsing single trial list...Parsed 18 replicates in 0.0s\n",
      "Analyzing data..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\naveen\\documents\\university\\grad school\\university of toronto\\research\\python\\impact\\impact\\impact\\core\\features.py:42: RuntimeWarning: invalid value encountered in true_divide\n",
      "  self.substrate_consumed\n",
      "c:\\users\\naveen\\documents\\university\\grad school\\university of toronto\\research\\python\\impact\\impact\\impact\\core\\features.py:42: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  self.substrate_consumed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ran analysis in 1.1s\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from impact.parsers import parse_raw_data\n",
    "from pprint import pprint\n",
    "expt = parse_raw_data('default_titers',file_name = '../tests/test_data/sample_input_data.xlsx')\n",
    "expt.calculate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data is now imported and organized, we can quickly get an overview of what we've imported."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "strain    media    environment    analytes\n",
      "--------  -------  -------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "strain1            None           ['ethanol', 'glucose', '1,3-butanediol', 'lactate', 'succinate', 'pyruvate', 'formate', 'R/S-2,3-butanediol', 'acetate', '3-hydroxybutyrate', 'acetoin', 'meso-2,3-butanediol', 'acetaldehyde', 'OD600']\n",
      "strain2            None           ['ethanol', 'glucose', '1,3-butanediol', 'lactate', 'succinate', 'pyruvate', 'formate', 'R/S-2,3-butanediol', 'acetate', '3-hydroxybutyrate', 'acetoin', 'meso-2,3-butanediol', 'acetaldehyde', 'OD600']\n",
      "strain2            None           ['1,3-butanediol', 'glucose', 'ethanol', 'lactate', 'succinate', 'pyruvate', 'formate', 'R/S-2,3-butanediol', 'acetate', '3-hydroxybutyrate', 'acetoin', 'meso-2,3-butanediol', 'acetaldehyde', 'OD600']\n",
      "strain3            None           ['1,3-butanediol', 'glucose', 'ethanol', 'lactate', 'succinate', 'pyruvate', 'formate', 'R/S-2,3-butanediol', 'acetate', '3-hydroxybutyrate', 'acetoin', 'meso-2,3-butanediol', 'acetaldehyde', 'OD600']\n",
      "strain3            None           ['1,3-butanediol', 'glucose', 'ethanol', 'lactate', 'succinate', 'pyruvate', 'formate', 'R/S-2,3-butanediol', 'acetate', '3-hydroxybutyrate', 'acetoin', 'meso-2,3-butanediol', 'acetaldehyde', 'OD600']\n",
      "strain4            None           ['glucose', '1,3-butanediol', 'ethanol', 'lactate', 'succinate', 'pyruvate', 'formate', 'R/S-2,3-butanediol', 'acetate', '3-hydroxybutyrate', 'acetoin', 'meso-2,3-butanediol', 'acetaldehyde', 'OD600']\n",
      "strain4            None           ['1,3-butanediol', 'glucose', 'ethanol', 'lactate', 'succinate', 'pyruvate', 'formate', 'R/S-2,3-butanediol', 'acetate', '3-hydroxybutyrate', 'acetoin', 'meso-2,3-butanediol', 'acetaldehyde', 'OD600']\n"
     ]
    }
   ],
   "source": [
    "print(expt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we dive into data analysis, it is worth having a basic understanding of the schema to know where to look for data.\n",
    "\n",
    "Firstly, all data is funneled into a `ReplicateTrial`, even if you only have one replicate. As such, it is convenient to always look for data in this object. This object contains both an `avg` and `std` attribute where you can find the respective statistics. `avg` and `std` attributes are instances of `SingleTrial`, so we can access the statistical data similarly to the raw data itself.\n",
    "\n",
    "## Querying and filtering for data\n",
    "\n",
    "After import, data is all sorted into python objects, associated to an sql database using an object-relational mapper, SQLalchemy. Usually, we're interested in comparing a set of features and a set of conditions (strain, media, environment) and the queryable database allows us to search for the data we are interested in.\n",
    "\n",
    "Although it is usually simple to use the ORM to access the database directly, basic querying can also be done using python list comprehensions. The major limitation is that you will only query experiments loaded in memory, e.g. experiments that were parsed into this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All\n",
      "strain: strain1,\tmedia: ,\tenv: None \n",
      "strain: strain2,\tmedia: ,\tenv: None \n",
      "strain: strain3,\tmedia: ,\tenv: None \n",
      "strain: strain4,\tmedia: ,\tenv: None \n",
      "strain: strain3,\tmedia: ,\tenv: None \n",
      "strain: strain4,\tmedia: ,\tenv: None \n",
      "strain: strain2,\tmedia: ,\tenv: None \n",
      "Filtered\n",
      "strain: strain1,\tmedia: ,\tenv: None \n"
     ]
    }
   ],
   "source": [
    "print('All')\n",
    "reps = [rep for rep in expt.replicate_trials]\n",
    "for rep in reps:\n",
    "    print(rep.trial_identifier)\n",
    "\n",
    "print('Filtered')\n",
    "reps = [rep for rep in expt.replicate_trials\n",
    "       if rep.trial_identifier.strain.name == 'strain1']\n",
    "for rep in reps:\n",
    "    print(rep.trial_identifier)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To use the database, we must query data through a `session` object. The session is open for the entire application."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlalchemy.orm.session.Session at 0x24ed289cb70>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from impact.database import session, create_db\n",
    "create_db()\n",
    "session"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have a session, we can use the standard SQLalchemy ORM language to query - it is described in detail here http://docs.sqlalchemy.org/en/latest/orm/tutorial.html#querying"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "session.add(expt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "strain: strain1,\tmedia: ,\tenv: None \n"
     ]
    }
   ],
   "source": [
    "reps = session.query(impt.ReplicateTrial)\\\n",
    "                .join(impt.ReplicateTrialIdentifier)\\\n",
    "                .join(impt.Strain)\\\n",
    "                .filter(impt.Strain.name == 'strain1').all()\n",
    "            \n",
    "for rep in reps:\n",
    "    print(rep.trial_identifier)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization\n",
    "\n",
    "Several packages already exist for visualization in python. The most popular one in matplotlib, it has very simple syntax which should feel familiar for matlab users; however, matplotlib generates static plots. The Impact visualization module is built around plotly, and as such it is worthwhile understanding the basic syntax of plotly charts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div id=\"b3c87cd8-2799-4c18-8ebc-532c49d142ff\" style=\"height: 525px; width: 100%;\" class=\"plotly-graph-div\"></div><script type=\"text/javascript\">require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {};window.PLOTLYENV.BASE_URL=\"https://plot.ly\";Plotly.newPlot(\"b3c87cd8-2799-4c18-8ebc-532c49d142ff\", [{\"x\": [0.0, 1.1111111111111112, 2.2222222222222223, 3.3333333333333335, 4.444444444444445, 5.555555555555555, 6.666666666666667, 7.777777777777779, 8.88888888888889, 10.0], \"y\": [0.0, 1.234567901234568, 4.938271604938272, 11.111111111111112, 19.75308641975309, 30.864197530864196, 44.44444444444445, 60.49382716049384, 79.01234567901236, 100.0], \"type\": \"scatter\"}, {\"x\": [0.0, 1.1111111111111112, 2.2222222222222223, 3.3333333333333335, 4.444444444444445, 5.555555555555555, 6.666666666666667, 7.777777777777779, 8.88888888888889, 10.0], \"y\": [0.0, 2.469135802469136, 9.876543209876544, 22.222222222222225, 39.50617283950618, 61.72839506172839, 88.8888888888889, 120.98765432098767, 158.0246913580247, 200.0], \"type\": \"scatter\"}], {}, {\"linkText\": \"Export to plot.ly\", \"showLink\": true})});</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div id=\"be2bb2b9-09ee-473a-9c09-81cdfdf8f9b8\" style=\"height: 525px; width: 400px;\" class=\"plotly-graph-div\"></div><script type=\"text/javascript\">require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {};window.PLOTLYENV.BASE_URL=\"https://plot.ly\";Plotly.newPlot(\"be2bb2b9-09ee-473a-9c09-81cdfdf8f9b8\", [{\"x\": [0.0, 1.1111111111111112, 2.2222222222222223, 3.3333333333333335, 4.444444444444445, 5.555555555555555, 6.666666666666667, 7.777777777777779, 8.88888888888889, 10.0], \"y\": [0.0, 1.234567901234568, 4.938271604938272, 11.111111111111112, 19.75308641975309, 30.864197530864196, 44.44444444444445, 60.49382716049384, 79.01234567901236, 100.0], \"type\": \"scatter\"}, {\"x\": [0.0, 1.1111111111111112, 2.2222222222222223, 3.3333333333333335, 4.444444444444445, 5.555555555555555, 6.666666666666667, 7.777777777777779, 8.88888888888889, 10.0], \"y\": [0.0, 2.469135802469136, 9.876543209876544, 22.222222222222225, 39.50617283950618, 61.72839506172839, 88.8888888888889, 120.98765432098767, 158.0246913580247, 200.0], \"type\": \"scatter\"}], {\"width\": 400}, {\"linkText\": \"Export to plot.ly\", \"showLink\": true})});</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import impact.plotting as implot\n",
    "import numpy as np\n",
    "\n",
    "# Charts are made up in a hierarchical structure, but can be quickly generated as follows:\n",
    "x = np.linspace(0,10,10) \n",
    "y = np.linspace(0,10,10)**2\n",
    "implot.plot([implot.go.Scatter(x=x,y=y),\n",
    "             implot.go.Scatter(x=x,y=y*2)])\n",
    "\n",
    "# For more control over these plots, they can be built form the ground up\n",
    "# Traces are defined for each feature\n",
    "traces = [implot.go.Scatter(x=x,y=y),\n",
    "             implot.go.Scatter(x=x,y=y*2)]\n",
    "\n",
    "layout = implot.go.Layout(width=400)\n",
    "\n",
    "# Traces are joined to a figure\n",
    "fig = implot.go.Figure(data=traces, layout=layout)\n",
    "\n",
    "# And a figure is printed using plot\n",
    "implot.plot(fig)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It should be noted that the implot package offers a direct wrapper to useful plotly functions, which could also be accessed with plotly directly. The Impact visualization module offers functions to help extract useful data and generate traces."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div id=\"a339f74b-ce03-4ed3-932b-f09122d03487\" style=\"height: 525px; width: 100%;\" class=\"plotly-graph-div\"></div><script type=\"text/javascript\">require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {};window.PLOTLYENV.BASE_URL=\"https://plot.ly\";Plotly.newPlot(\"a339f74b-ce03-4ed3-932b-f09122d03487\", [{\"legendgroup\": null, \"error_y\": {\"color\": \"rgb(228,26,28)\", \"array\": [0.0, 0.0, 0.0, 0.01759006581774512, 0.00871936334298372, 0.022915464467838976, 0.07563184277245959, 0.3711273289716035, 0.7412839401220788, 0.17366802002904683, 0.6117433991638952, 0.09426171901593323, 0.05665602699587767], \"type\": \"data\", \"visible\": true}, \"x\": [0.0, 3.0, 6.0, 9.0, 12.0, 15.0, 24.0, 24.1, 36.0, 48.0, 60.0, 72.0, 84.0], \"marker\": {\"color\": \"rgb(228,26,28)\"}, \"type\": \"scatter\", \"line\": {\"color\": \"rgb(228,26,28)\"}, \"showlegend\": true, \"y\": [0.0, 0.0, 0.0, 0.012438054821245267, 0.09493180291940456, 0.378576035928341, 4.469794174875654, 3.989181916049178, 6.439747028944755, 9.279630467591703, 10.15185487097027, 11.353725977896472, 12.048710322467286], \"name\": \"None strain1 plasmid1 \"}, {\"legendgroup\": null, \"error_y\": {\"color\": \"rgb(55,126,184)\", \"array\": [0.004680325474403282, 0.014366757274359092, 0.0013913905133873456, 0.026569398763139438, 0.15307879277561787, 0.38212801883609554, 0.43151215107078145, 0.9891039157658118, 1.438692883402948, 1.6251894008118177, 1.2093294468415405, 0.7758880166028469], \"type\": \"data\", \"visible\": true}, \"x\": [0.0, 3.0, 6.0, 9.0, 15.0, 24.0, 24.1, 36.0, 48.0, 60.0, 72.0, 84.0], \"marker\": {\"color\": \"rgb(55,126,184)\"}, \"type\": \"scatter\", \"line\": {\"color\": \"rgb(55,126,184)\"}, \"showlegend\": true, \"y\": [0.10368435778848928, 0.12777423501396445, 0.12572080035008257, 0.2327177178067815, 2.032239181984248, 4.388616997004181, 4.703900256352575, 6.402539575311688, 8.724294732093723, 10.300224241434828, 11.996834418506447, 12.544341139685358], \"name\": \"None strain2 plasmid1 \"}, {\"legendgroup\": null, \"error_y\": {\"color\": \"rgb(77,175,74)\", \"array\": [0.0, 0.0, 0.0, 0.009106788780224426, 0.002539664701816717, 0.02010553154721424, 0.13803233181172858, 0.13067936591096424, 0.20826600122337557, 0.020715605126510713, 0.237428077929155], \"type\": \"data\", \"visible\": true}, \"x\": [0.0, 3.0, 6.0, 9.0, 12.0, 15.0, 24.0, 24.1, 36.0, 48.0, 60.0], \"marker\": {\"color\": \"rgb(77,175,74)\"}, \"type\": \"scatter\", \"line\": {\"color\": \"rgb(77,175,74)\"}, \"showlegend\": true, \"y\": [0.0, 0.0, 0.0, 0.005257806953715635, 0.049373198995248814, 0.14108630785573203, 0.8911447127089952, 0.7846232103081276, 1.2110236560308416, 1.458190276123533, 1.6915154968023687], \"name\": \"None strain3 plasmid1 \"}, {\"legendgroup\": null, \"error_y\": {\"color\": \"rgb(152,78,163)\", \"array\": [0.0, 0.0, 0.0, 0.0020525310387137703, 0.01676881327656337, 0.015795558742459064, 0.12527142801153396, 0.20119514247634857, 0.16243897943492402, 0.2707096228602337], \"type\": \"data\", \"visible\": true}, \"x\": [0.0, 6.0, 9.0, 12.0, 15.0, 24.0, 24.1, 36.0, 48.0, 60.0], \"marker\": {\"color\": \"rgb(152,78,163)\"}, \"type\": \"scatter\", \"line\": {\"color\": \"rgb(152,78,163)\"}, \"showlegend\": true, \"y\": [0.0, 0.0, 0.0, 0.03062791025564899, 0.08623356714630151, 0.48170055934371964, 0.36221429861526633, 0.9396974151485583, 0.8698366772051302, 1.0848654000389786], \"name\": \"None strain4 plasmid1 \"}, {\"legendgroup\": null, \"error_y\": {\"color\": \"rgb(255,127,0)\", \"array\": [0.0, 0.0, 0.0006911421735325195, 0.002641849693118749, 0.0, 0.0002854572856910808, 0.01497044662715457, 0.012565426927654614, 0.01892995343351642, 0.03360280783145241, 0.005441812826431069], \"type\": \"data\", \"visible\": true}, \"x\": [0.0, 3.0, 6.0, 9.0, 12.0, 15.0, 24.0, 24.1, 36.0, 48.0, 60.0], \"marker\": {\"color\": \"rgb(255,127,0)\"}, \"type\": \"scatter\", \"line\": {\"color\": \"rgb(255,127,0)\"}, \"showlegend\": true, \"y\": [0.0, 0.0, 0.013157721294153242, 0.0018680698328798668, 0.0, 0.013257460201663396, 0.14239002077350188, 0.13536935830699462, 0.1869849462989518, 0.1837553264096538, 0.19057088493116778], \"name\": \"None strain3 plasmid3 \"}, {\"legendgroup\": null, \"error_y\": {\"color\": \"rgb(255,255,51)\", \"array\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0653137702803532, 0.035261637786012066, 0.09029788340222862, 0.1055980296389689, 0.15191476992707262], \"type\": \"data\", \"visible\": true}, \"x\": [0.0, 3.0, 6.0, 9.0, 12.0, 15.0, 24.0, 24.1, 36.0, 48.0, 60.0], \"marker\": {\"color\": \"rgb(255,255,51)\"}, \"type\": \"scatter\", \"line\": {\"color\": \"rgb(255,255,51)\"}, \"showlegend\": true, \"y\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15295651563931154, 0.10450207365377456, 0.20895822197617767, 0.28195490116395916, 0.35397344869548447], \"name\": \"None strain4 plasmid3 \"}, {\"legendgroup\": null, \"error_y\": {\"color\": \"rgb(166,86,40)\", \"array\": [0.02968128314440146, 0.0014816645740292162, 0.02111511037904726, 0.09622465804827773, 0.4569993760195169, 0.26163542928724276, 0.5676593970534616, 1.4541619384318882, 2.1851247946305623, 2.6420134795873382, 1.9803191183140414, 0.828043155694391], \"type\": \"data\", \"visible\": true}, \"x\": [0.0, 3.0, 6.0, 9.0, 15.0, 24.0, 24.1, 36.0, 48.0, 60.0, 72.0, 84.0], \"marker\": {\"color\": \"rgb(166,86,40)\"}, \"type\": \"scatter\", \"line\": {\"color\": \"rgb(166,86,40)\"}, \"showlegend\": true, \"y\": [0.20717116730345783, 0.23689644905501736, 0.34144020993071705, 1.4824730382216043, 7.092117182679561, 7.883006804939328, 8.120505850537533, 12.975079584750242, 16.971890417720573, 18.77735663067879, 18.680129807896762, 17.961650568970086], \"name\": \"None strain2 plasmid2 \"}], {}, {\"linkText\": \"Export to plot.ly\", \"showLink\": true})});</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from impact.plotting import time_profile_traces\n",
    "\n",
    "implot.plot(time_profile_traces(replicate_trials=expt.replicate_trials,\n",
    "                               analyte='ethanol'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "\n",
    "# Grab the average data\n",
    "rep_list = [rep for rep in expt.replicate_trial_dict.values()]\n",
    "\n",
    "etoh_datas = []\n",
    "for rep in rep_list:\n",
    "    etoh_datas.append({'avg': rep.avg.analyte_dict['ethanol'], \n",
    "                      'std': rep.std.analyte_dict['ethanol']})\n",
    "    for rep_id in rep.single_trial_dict:\n",
    "        etoh_datas[-1][rep_id] = rep.single_trial_dict[rep_id].analyte_dict['ethanol']\n",
    "\n",
    "for etoh_data in etoh_datas:\n",
    "    layout = implot.go.Layout(title=str(etoh_data['avg'].trial_identifier))\n",
    "    implot.plot(implot.go.Figure(data=[implot.go.Scatter(x=etoh_data[key].time_vector, \n",
    "                                   y=etoh_data[key].data_vector,\n",
    "                                  name=key) for key in sorted(etoh_data)],layout=layout))\n",
    "    \n",
    "# implot.plot([implot.go.Scatter(x=etoh_data.time_vector, y=etoh_data.data_vector) for etoh_data in etoh_datas])\n",
    "\n",
    "print(etoh_data)\n",
    "# and the data for each replicate\n",
    "# for rep_id in rep.\n",
    "# for analyte_data in etoh_data['avg']:\n",
    "#     print(analyte_data.trial_identifier)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import impact.plotting\n",
    "import plotly.graph_objs as go\n",
    "from plotly.offline import iplot\n",
    "\n",
    "iplot(\n",
    "    [go.Scatter(\n",
    "            x=analyte_data_avg.time_vector,\n",
    "            y=analyte_data_avg.data_vector,\n",
    "            name=str(analyte_data),\n",
    "            error_y=dict(type='data', array=analyte_data_std.data_vector)\n",
    "               ) \n",
    "     for analyte_data_avg, analyte_data_std in zip(ethanol_avg_data, ethanol_std_data)]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring features\n",
    "\n",
    "With a standard schema for the data, we can now begin to explore some of the features which have been generated. Features include things like:\n",
    "\n",
    "- rate ($g\\ \\ h^{-1}$)\n",
    "- yield ($g_{product}\\ \\ g_{substrate}^{-1}$)\n",
    "- specific productivity ($g\\ \\ gdw^{-1}\\ \\ h^{-1}$)\n",
    "- normalized data (e.g. $a.u. fluorescence\\ \\ OD_{600}^{-1}$)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ethanol_avg_specific_productivity = [expt.replicate_experiment_dict[replicate_key].avg.analyte_dict['ethanol'].specific_productivity for replicate_key in expt.replicate_experiment_dict]\n",
    "# ethanol_std_specific_productivity = [expt.replicate_experiment_dict[replicate_key].std.analyte_dict['ethanol'].specific_productivity for replicate_key in expt.replicate_experiment_dict]\n",
    "\n",
    "iplot(\n",
    "    [go.Scatter(\n",
    "            x=analyte_data_avg.time_vector,\n",
    "            y=analyte_data_avg.specific_productivity,\n",
    "            name=str(analyte_data),\n",
    "#             error_y=dict(type='data', array=analyte_data_std.product_yield)\n",
    "               ) \n",
    "     for analyte_data_avg, analyte_data_std in zip(ethanol_avg_data, ethanol_std_data)]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or maybe just the endpoints.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ethanol_avg_data = sorted(ethanol_avg_data,key=lambda x: x.pd_series.iloc[-1])\n",
    "\n",
    "iplot(\n",
    "    [go.Bar(\n",
    "            x=[str(analyte_data_avg) for analyte_data_avg in ethanol_avg_data],\n",
    "            y=[analyte_data_avg.pd_series.iloc[-1] for analyte_data_avg in ethanol_avg_data],\n",
    "            name=str(analyte_data),\n",
    "#             error_y=dict(type='data', array=analyte_data_std.product_yield)\n",
    "               )]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
